{"ast":null,"code":"import { api } from './api';\nexport const leaseService = {\n  // Get all leases for the current landlord\n  async getLeases() {\n    const response = await api.get('/leases/');\n    return response.data;\n  },\n  // Get a single lease by ID\n  async getLease(id) {\n    const response = await api.get(`/leases/${id}`);\n    return response.data;\n  },\n  // Create a new lease\n  async createLease(lease) {\n    // Transform frontend camelCase to backend snake_case\n    // Note: Backend currently only supports basic fields\n    const backendPayload = {\n      property_id: lease.propertyId,\n      tenant_id: lease.tenantId,\n      start_date: lease.startDate,\n      end_date: lease.endDate,\n      rent_amount: lease.monthlyRent,\n      security_deposit: lease.securityDeposit || 0\n    };\n    console.log('ðŸ”„ Original lease data:', lease);\n    console.log('ðŸ”„ Transformed lease payload:', backendPayload);\n    const response = await api.post('/leases', backendPayload);\n    return response.data;\n  },\n  // Update an existing lease\n  async updateLease(lease) {\n    const response = await api.put(`/leases/${lease.id}`, lease);\n    return response.data;\n  },\n  // Delete a lease\n  async deleteLease(id) {\n    await api.delete(`/leases/${id}`);\n  },\n  // Get leases by property\n  async getLeasesByProperty(propertyId) {\n    const response = await api.get(`/leases?propertyId=${propertyId}`);\n    return response.data;\n  },\n  // Get leases by tenant\n  async getLeasesByTenant(tenantId) {\n    const response = await api.get(`/leases?tenantId=${tenantId}`);\n    return response.data;\n  },\n  // Get active leases\n  async getActiveLeases() {\n    const response = await api.get('/leases?status=active');\n    return response.data;\n  },\n  // Get expiring leases (within specified days)\n  async getExpiringLeases(days = 30) {\n    const response = await api.get(`/leases/expiring?days=${days}`);\n    return response.data;\n  },\n  // Terminate a lease\n  async terminateLease(leaseId, termination) {\n    const response = await api.post(`/leases/${leaseId}/terminate`, termination);\n    return response.data;\n  },\n  // Renew a lease\n  async renewLease(leaseId, renewal) {\n    const response = await api.post(`/leases/${leaseId}/renew`, renewal);\n    return response.data;\n  },\n  // Upload lease documents\n  async uploadDocuments(leaseId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('documents', file);\n    });\n    const response = await api.post(`/leases/${leaseId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.documentUrls;\n  },\n  // Delete lease document\n  async deleteDocument(leaseId, documentUrl) {\n    await api.delete(`/leases/${leaseId}/documents`, {\n      data: {\n        documentUrl\n      }\n    });\n  },\n  // Generate lease document\n  async generateLeaseDocument(leaseId) {\n    const response = await api.post(`/leases/${leaseId}/generate-document`);\n    return response.data.documentUrl;\n  },\n  // Sign lease\n  async signLease(leaseId, signatureData) {\n    const response = await api.post(`/leases/${leaseId}/sign`, signatureData);\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","leaseService","getLeases","response","get","data","getLease","id","createLease","lease","backendPayload","property_id","propertyId","tenant_id","tenantId","start_date","startDate","end_date","endDate","rent_amount","monthlyRent","security_deposit","securityDeposit","console","log","post","updateLease","put","deleteLease","delete","getLeasesByProperty","getLeasesByTenant","getActiveLeases","getExpiringLeases","days","terminateLease","leaseId","termination","renewLease","renewal","uploadDocuments","files","formData","FormData","forEach","file","append","headers","documentUrls","deleteDocument","documentUrl","generateLeaseDocument","signLease","signatureData"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/leaseService.ts"],"sourcesContent":["import { api } from './api';\nimport { Lease, CreateLeaseRequest, UpdateLeaseRequest, LeaseRenewal, LeaseTermination } from '../types/lease';\n\nexport const leaseService = {\n  // Get all leases for the current landlord\n  async getLeases(): Promise<Lease[]> {\n    const response = await api.get('/leases/');\n    return response.data;\n  },\n\n  // Get a single lease by ID\n  async getLease(id: string): Promise<Lease> {\n    const response = await api.get(`/leases/${id}`);\n    return response.data;\n  },\n\n  // Create a new lease\n  async createLease(lease: CreateLeaseRequest): Promise<Lease> {\n    // Transform frontend camelCase to backend snake_case\n    // Note: Backend currently only supports basic fields\n    const backendPayload = {\n      property_id: lease.propertyId,\n      tenant_id: lease.tenantId,\n      start_date: lease.startDate,\n      end_date: lease.endDate,\n      rent_amount: lease.monthlyRent,\n      security_deposit: lease.securityDeposit || 0\n    };\n\n    console.log('ðŸ”„ Original lease data:', lease);\n    console.log('ðŸ”„ Transformed lease payload:', backendPayload);\n    const response = await api.post('/leases', backendPayload);\n    return response.data;\n  },\n\n  // Update an existing lease\n  async updateLease(lease: UpdateLeaseRequest): Promise<Lease> {\n    const response = await api.put(`/leases/${lease.id}`, lease);\n    return response.data;\n  },\n\n  // Delete a lease\n  async deleteLease(id: string): Promise<void> {\n    await api.delete(`/leases/${id}`);\n  },\n\n  // Get leases by property\n  async getLeasesByProperty(propertyId: string): Promise<Lease[]> {\n    const response = await api.get(`/leases?propertyId=${propertyId}`);\n    return response.data;\n  },\n\n  // Get leases by tenant\n  async getLeasesByTenant(tenantId: string): Promise<Lease[]> {\n    const response = await api.get(`/leases?tenantId=${tenantId}`);\n    return response.data;\n  },\n\n  // Get active leases\n  async getActiveLeases(): Promise<Lease[]> {\n    const response = await api.get('/leases?status=active');\n    return response.data;\n  },\n\n  // Get expiring leases (within specified days)\n  async getExpiringLeases(days: number = 30): Promise<Lease[]> {\n    const response = await api.get(`/leases/expiring?days=${days}`);\n    return response.data;\n  },\n\n  // Terminate a lease\n  async terminateLease(leaseId: string, termination: Omit<LeaseTermination, 'id' | 'leaseId' | 'createdAt'>): Promise<LeaseTermination> {\n    const response = await api.post(`/leases/${leaseId}/terminate`, termination);\n    return response.data;\n  },\n\n  // Renew a lease\n  async renewLease(leaseId: string, renewal: Omit<LeaseRenewal, 'id' | 'originalLeaseId' | 'createdAt'>): Promise<LeaseRenewal> {\n    const response = await api.post(`/leases/${leaseId}/renew`, renewal);\n    return response.data;\n  },\n\n  // Upload lease documents\n  async uploadDocuments(leaseId: string, files: File[]): Promise<string[]> {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('documents', file);\n    });\n\n    const response = await api.post(`/leases/${leaseId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.documentUrls;\n  },\n\n  // Delete lease document\n  async deleteDocument(leaseId: string, documentUrl: string): Promise<void> {\n    await api.delete(`/leases/${leaseId}/documents`, {\n      data: { documentUrl },\n    });\n  },\n\n  // Generate lease document\n  async generateLeaseDocument(leaseId: string): Promise<string> {\n    const response = await api.post(`/leases/${leaseId}/generate-document`);\n    return response.data.documentUrl;\n  },\n\n  // Sign lease\n  async signLease(leaseId: string, signatureData: { signature: string; signedBy: string }): Promise<Lease> {\n    const response = await api.post(`/leases/${leaseId}/sign`, signatureData);\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}