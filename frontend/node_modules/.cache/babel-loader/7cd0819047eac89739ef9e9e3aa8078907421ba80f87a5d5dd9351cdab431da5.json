{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const tenantService = {\n  // Get all tenants for the current landlord\n  async getTenants() {\n    try {\n      // Use the dedicated tenants endpoint\n      const response = await api.get('/users/tenants');\n      const tenants = response.data;\n\n      // Transform tenants data to match expected interface\n      return tenants.map(tenant => ({\n        id: tenant.id,\n        firstName: tenant.firstName || tenant.first_name || '',\n        lastName: tenant.lastName || tenant.last_name || '',\n        email: tenant.email || '',\n        phone: tenant.phone || '',\n        dateOfBirth: tenant.dateOfBirth || '',\n        socialSecurityNumber: tenant.socialSecurityNumber || '',\n        emergencyContact: tenant.emergencyContact || {\n          name: '',\n          phone: '',\n          relationship: ''\n        },\n        employment: tenant.employment || {\n          employer: '',\n          position: '',\n          monthlyIncome: 0,\n          employmentStartDate: ''\n        },\n        address: tenant.address || {\n          street: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: 'US'\n        },\n        status: tenant.status || 'active',\n        moveInDate: tenant.moveInDate || '',\n        moveOutDate: tenant.moveOutDate || '',\n        notes: tenant.notes || '',\n        documents: [],\n        leaseHistory: [],\n        paymentHistory: [],\n        createdAt: tenant.created_at || tenant.createdAt || '',\n        updatedAt: tenant.updated_at || tenant.updatedAt || '',\n        isActive: tenant.status === 'active',\n        // Current lease info - would need additional API call to get this\n        currentProperty: '',\n        currentRent: 0,\n        leaseStartDate: '',\n        leaseEndDate: ''\n      }));\n    } catch (error) {\n      console.error('Error fetching tenants from leases:', error);\n      return [];\n    }\n  },\n  // Get a single tenant by ID\n  async getTenant(id) {\n    const response = await api.get(`/users/tenants/${id}`);\n    const tenant = response.data;\n\n    // Transform tenant data to match expected interface\n    return {\n      id: tenant.id,\n      firstName: tenant.firstName || tenant.first_name || '',\n      lastName: tenant.lastName || tenant.last_name || '',\n      email: tenant.email || '',\n      phone: tenant.phone || '',\n      dateOfBirth: tenant.dateOfBirth || '',\n      socialSecurityNumber: tenant.socialSecurityNumber || '',\n      emergencyContact: tenant.emergencyContact || {\n        name: '',\n        phone: '',\n        relationship: ''\n      },\n      employment: tenant.employment || {\n        employer: '',\n        position: '',\n        monthlyIncome: 0,\n        employmentStartDate: ''\n      },\n      address: tenant.address || {\n        street: '',\n        city: '',\n        state: '',\n        zipCode: '',\n        country: 'US'\n      },\n      status: tenant.status || 'active',\n      moveInDate: tenant.moveInDate || '',\n      moveOutDate: tenant.moveOutDate || '',\n      notes: tenant.notes || '',\n      documents: [],\n      createdAt: tenant.created_at || tenant.createdAt || '',\n      updatedAt: tenant.updated_at || tenant.updatedAt || '',\n      isActive: tenant.status === 'active',\n      // Current lease info - would need additional API call to get this\n      currentProperty: '',\n      currentRent: 0,\n      leaseStartDate: '',\n      leaseEndDate: '',\n      leaseHistory: [],\n      paymentHistory: []\n    };\n  },\n  // Create a new tenant\n  async createTenant(tenant) {\n    const response = await api.post('/users/tenants', tenant);\n    return response.data;\n  },\n  // Update an existing tenant\n  async updateTenant(tenant) {\n    const response = await api.put(`/users/tenants/${tenant.id}`, tenant);\n    return response.data;\n  },\n  // Delete a tenant\n  async deleteTenant(id) {\n    await api.delete(`/users/tenants/${id}`);\n  },\n  // Upload tenant documents\n  async uploadDocuments(tenantId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('documents', file);\n    });\n    const response = await api.post(`/tenants/${tenantId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.documentUrls;\n  },\n  // Delete tenant document\n  async deleteDocument(tenantId, documentUrl) {\n    await api.delete(`/tenants/${tenantId}/documents`, {\n      data: {\n        documentUrl\n      }\n    });\n  },\n  // Get tenants by property\n  async getTenantsByProperty(propertyId) {\n    const response = await api.get(`/properties/${propertyId}/tenants`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","tenantService","getTenants","response","get","tenants","data","map","tenant","id","firstName","first_name","lastName","last_name","email","phone","dateOfBirth","socialSecurityNumber","emergencyContact","name","relationship","employment","employer","position","monthlyIncome","employmentStartDate","address","street","city","state","zipCode","country","status","moveInDate","moveOutDate","notes","documents","leaseHistory","paymentHistory","createdAt","created_at","updatedAt","updated_at","isActive","currentProperty","currentRent","leaseStartDate","leaseEndDate","error","console","getTenant","createTenant","post","updateTenant","put","deleteTenant","delete","uploadDocuments","tenantId","files","formData","FormData","forEach","file","append","documentUrls","deleteDocument","documentUrl","getTenantsByProperty","propertyId"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/tenantService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Tenant, CreateTenantRequest, UpdateTenantRequest } from '../types/tenant';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const tenantService = {\n  // Get all tenants for the current landlord\n  async getTenants(): Promise<Tenant[]> {\n    try {\n      // Use the dedicated tenants endpoint\n      const response = await api.get('/users/tenants');\n      const tenants = response.data;\n      \n      // Transform tenants data to match expected interface\n      return tenants.map((tenant: any) => ({\n        id: tenant.id,\n        firstName: tenant.firstName || tenant.first_name || '',\n        lastName: tenant.lastName || tenant.last_name || '',\n        email: tenant.email || '',\n        phone: tenant.phone || '',\n        dateOfBirth: tenant.dateOfBirth || '',\n        socialSecurityNumber: tenant.socialSecurityNumber || '',\n        emergencyContact: tenant.emergencyContact || {\n          name: '',\n          phone: '',\n          relationship: ''\n        },\n        employment: tenant.employment || {\n          employer: '',\n          position: '',\n          monthlyIncome: 0,\n          employmentStartDate: ''\n        },\n        address: tenant.address || {\n          street: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: 'US'\n        },\n        status: tenant.status || 'active',\n        moveInDate: tenant.moveInDate || '',\n        moveOutDate: tenant.moveOutDate || '',\n        notes: tenant.notes || '',\n        documents: [],\n        leaseHistory: [],\n        paymentHistory: [],\n        createdAt: tenant.created_at || tenant.createdAt || '',\n        updatedAt: tenant.updated_at || tenant.updatedAt || '',\n        isActive: tenant.status === 'active',\n        // Current lease info - would need additional API call to get this\n        currentProperty: '',\n        currentRent: 0,\n        leaseStartDate: '',\n        leaseEndDate: ''\n      }));\n    } catch (error) {\n      console.error('Error fetching tenants from leases:', error);\n      return [];\n    }\n  },\n\n  // Get a single tenant by ID\n  async getTenant(id: string): Promise<Tenant> {\n    const response = await api.get(`/users/tenants/${id}`);\n    const tenant = response.data;\n    \n    // Transform tenant data to match expected interface\n    return {\n      id: tenant.id,\n      firstName: tenant.firstName || tenant.first_name || '',\n      lastName: tenant.lastName || tenant.last_name || '',\n      email: tenant.email || '',\n      phone: tenant.phone || '',\n      dateOfBirth: tenant.dateOfBirth || '',\n      socialSecurityNumber: tenant.socialSecurityNumber || '',\n      emergencyContact: tenant.emergencyContact || {\n        name: '',\n        phone: '',\n        relationship: ''\n      },\n      employment: tenant.employment || {\n        employer: '',\n        position: '',\n        monthlyIncome: 0,\n        employmentStartDate: ''\n      },\n      address: tenant.address || {\n        street: '',\n        city: '',\n        state: '',\n        zipCode: '',\n        country: 'US'\n      },\n      status: tenant.status || 'active',\n      moveInDate: tenant.moveInDate || '',\n      moveOutDate: tenant.moveOutDate || '',\n      notes: tenant.notes || '',\n      documents: [],\n      createdAt: tenant.created_at || tenant.createdAt || '',\n      updatedAt: tenant.updated_at || tenant.updatedAt || '',\n      isActive: tenant.status === 'active',\n      // Current lease info - would need additional API call to get this\n      currentProperty: '',\n      currentRent: 0,\n      leaseStartDate: '',\n      leaseEndDate: '',\n      leaseHistory: [],\n      paymentHistory: []\n    };\n  },\n\n  // Create a new tenant\n  async createTenant(tenant: CreateTenantRequest): Promise<Tenant> {\n    const response = await api.post('/users/tenants', tenant);\n    return response.data;\n  },\n\n  // Update an existing tenant\n  async updateTenant(tenant: UpdateTenantRequest): Promise<Tenant> {\n    const response = await api.put(`/users/tenants/${tenant.id}`, tenant);\n    return response.data;\n  },\n\n  // Delete a tenant\n  async deleteTenant(id: string): Promise<void> {\n    await api.delete(`/users/tenants/${id}`);\n  },\n\n  // Upload tenant documents\n  async uploadDocuments(tenantId: string, files: File[]): Promise<string[]> {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('documents', file);\n    });\n\n    const response = await api.post(`/tenants/${tenantId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.documentUrls;\n  },\n\n  // Delete tenant document\n  async deleteDocument(tenantId: string, documentUrl: string): Promise<void> {\n    await api.delete(`/tenants/${tenantId}/documents`, {\n      data: { documentUrl },\n    });\n  },\n\n  // Get tenants by property\n  async getTenantsByProperty(propertyId: string): Promise<Tenant[]> {\n    const response = await api.get(`/properties/${propertyId}/tenants`);\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}