{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const reportsService = {\n  // Reports\n  async getReports() {\n    const response = await api.get('/api/v1/reports');\n    return response.data;\n  },\n  async getReport(id) {\n    const response = await api.get(`/api/v1/reports/${id}`);\n    return response.data;\n  },\n  async createReport(report) {\n    const response = await api.post('/api/v1/reports', report);\n    return response.data;\n  },\n  async deleteReport(id) {\n    await api.delete(`/api/v1/reports/${id}`);\n  },\n  async downloadReport(id) {\n    const response = await api.get(`/api/v1/reports/${id}/download`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Specific Report Types\n  async generateFinancialReport(startDate, endDate, propertyIds) {\n    const response = await api.post('/api/v1/reports/financial', {\n      startDate,\n      endDate,\n      propertyIds\n    });\n    return response.data;\n  },\n  async generateOccupancyReport(startDate, endDate, propertyIds) {\n    const response = await api.post('/api/v1/reports/occupancy', {\n      startDate,\n      endDate,\n      propertyIds\n    });\n    return response.data;\n  },\n  async generateMaintenanceReport(startDate, endDate, propertyIds) {\n    const response = await api.post('/api/v1/reports/maintenance', {\n      startDate,\n      endDate,\n      propertyIds\n    });\n    return response.data;\n  },\n  async generateTenantReport(startDate, endDate, propertyIds) {\n    const response = await api.post('/api/v1/reports/tenant', {\n      startDate,\n      endDate,\n      propertyIds\n    });\n    return response.data;\n  },\n  async generatePropertyReport(startDate, endDate, propertyIds) {\n    const response = await api.post('/api/v1/reports/property', {\n      startDate,\n      endDate,\n      propertyIds\n    });\n    return response.data;\n  },\n  // Report Templates\n  async getReportTemplates() {\n    const response = await api.get('/api/v1/report-templates');\n    return response.data;\n  },\n  async getReportTemplate(id) {\n    const response = await api.get(`/api/v1/report-templates/${id}`);\n    return response.data;\n  },\n  async createReportTemplate(template) {\n    const response = await api.post('/api/v1/report-templates', template);\n    return response.data;\n  },\n  async updateReportTemplate(id, template) {\n    const response = await api.put(`/api/v1/report-templates/${id}`, template);\n    return response.data;\n  },\n  async deleteReportTemplate(id) {\n    await api.delete(`/api/v1/report-templates/${id}`);\n  },\n  // Analytics Dashboard\n  async getAnalyticsDashboard(startDate, endDate) {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    const response = await api.get(`/api/v1/analytics/dashboard?${params.toString()}`);\n    return response.data;\n  },\n  // Export functions\n  async exportReportData(reportType, startDate, endDate, format, propertyIds) {\n    const response = await api.post(`/api/v1/reports/export`, {\n      reportType,\n      startDate,\n      endDate,\n      format,\n      propertyIds\n    }, {\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Scheduled Reports\n  async getScheduledReports() {\n    const response = await api.get('/api/v1/scheduled-reports');\n    return response.data;\n  },\n  async createScheduledReport(schedule) {\n    const response = await api.post('/api/v1/scheduled-reports', schedule);\n    return response.data;\n  },\n  async deleteScheduledReport(id) {\n    await api.delete(`/api/v1/scheduled-reports/${id}`);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","reportsService","getReports","response","get","data","getReport","id","createReport","report","post","deleteReport","delete","downloadReport","responseType","generateFinancialReport","startDate","endDate","propertyIds","generateOccupancyReport","generateMaintenanceReport","generateTenantReport","generatePropertyReport","getReportTemplates","getReportTemplate","createReportTemplate","template","updateReportTemplate","put","deleteReportTemplate","getAnalyticsDashboard","params","URLSearchParams","append","toString","exportReportData","reportType","format","getScheduledReports","createScheduledReport","schedule","deleteScheduledReport"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/reportsService.ts"],"sourcesContent":["import axios from 'axios';\nimport { \n  Report, \n  ReportTemplate, \n  CreateReportRequest, \n  AnalyticsDashboard,\n  FinancialReport,\n  OccupancyReport,\n  MaintenanceReport,\n  TenantReport,\n  PropertyReport\n} from '../types/reports';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const reportsService = {\n  // Reports\n  async getReports(): Promise<Report[]> {\n    const response = await api.get('/api/v1/reports');\n    return response.data;\n  },\n\n  async getReport(id: string): Promise<Report> {\n    const response = await api.get(`/api/v1/reports/${id}`);\n    return response.data;\n  },\n\n  async createReport(report: CreateReportRequest): Promise<Report> {\n    const response = await api.post('/api/v1/reports', report);\n    return response.data;\n  },\n\n  async deleteReport(id: string): Promise<void> {\n    await api.delete(`/api/v1/reports/${id}`);\n  },\n\n  async downloadReport(id: string): Promise<Blob> {\n    const response = await api.get(`/api/v1/reports/${id}/download`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  // Specific Report Types\n  async generateFinancialReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<FinancialReport> {\n    const response = await api.post('/api/v1/reports/financial', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generateOccupancyReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<OccupancyReport> {\n    const response = await api.post('/api/v1/reports/occupancy', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generateMaintenanceReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<MaintenanceReport> {\n    const response = await api.post('/api/v1/reports/maintenance', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generateTenantReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<TenantReport> {\n    const response = await api.post('/api/v1/reports/tenant', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generatePropertyReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<PropertyReport> {\n    const response = await api.post('/api/v1/reports/property', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  // Report Templates\n  async getReportTemplates(): Promise<ReportTemplate[]> {\n    const response = await api.get('/api/v1/report-templates');\n    return response.data;\n  },\n\n  async getReportTemplate(id: string): Promise<ReportTemplate> {\n    const response = await api.get(`/api/v1/report-templates/${id}`);\n    return response.data;\n  },\n\n  async createReportTemplate(template: Omit<ReportTemplate, 'id' | 'createdAt' | 'createdBy'>): Promise<ReportTemplate> {\n    const response = await api.post('/api/v1/report-templates', template);\n    return response.data;\n  },\n\n  async updateReportTemplate(id: string, template: Partial<ReportTemplate>): Promise<ReportTemplate> {\n    const response = await api.put(`/api/v1/report-templates/${id}`, template);\n    return response.data;\n  },\n\n  async deleteReportTemplate(id: string): Promise<void> {\n    await api.delete(`/api/v1/report-templates/${id}`);\n  },\n\n  // Analytics Dashboard\n  async getAnalyticsDashboard(startDate?: string, endDate?: string): Promise<AnalyticsDashboard> {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    \n    const response = await api.get(`/api/v1/analytics/dashboard?${params.toString()}`);\n    return response.data;\n  },\n\n  // Export functions\n  async exportReportData(\n    reportType: string,\n    startDate: string,\n    endDate: string,\n    format: 'csv' | 'excel' | 'pdf',\n    propertyIds?: string[]\n  ): Promise<Blob> {\n    const response = await api.post(`/api/v1/reports/export`, {\n      reportType,\n      startDate,\n      endDate,\n      format,\n      propertyIds,\n    }, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  // Scheduled Reports\n  async getScheduledReports(): Promise<any[]> {\n    const response = await api.get('/api/v1/scheduled-reports');\n    return response.data;\n  },\n\n  async createScheduledReport(schedule: {\n    reportType: string;\n    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n    recipients: string[];\n    filters?: any;\n  }): Promise<any> {\n    const response = await api.post('/api/v1/scheduled-reports', schedule);\n    return response.data;\n  },\n\n  async deleteScheduledReport(id: string): Promise<void> {\n    await api.delete(`/api/v1/scheduled-reports/${id}`);\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}