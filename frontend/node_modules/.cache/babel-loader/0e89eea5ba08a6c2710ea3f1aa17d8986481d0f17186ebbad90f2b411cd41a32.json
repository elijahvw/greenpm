{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{api}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(localStorage.getItem('token'));const[loading,setLoading]=useState(true);useEffect(()=>{console.log('🔍 AuthContext: Checking token...',token?'Token exists':'No token');if(token){validateToken();}else{setLoading(false);}},[token]);// eslint-disable-line react-hooks/exhaustive-deps\nconst validateToken=async()=>{try{console.log('🔍 AuthContext: Validating token with /auth/me...');const response=await api.get('/auth/me');console.log('✅ AuthContext: Token valid, user:',response.data);setUser(response.data);setLoading(false);}catch(error){console.error('❌ AuthContext: Token validation failed:',error);logout();}};const login=async(email,password)=>{try{console.log('🔐 AuthContext: Attempting login with email:',email);const response=await api.post('/auth/login',{email,password});console.log('🔐 AuthContext: Login response:',response.data);const{access_token,user:userData}=response.data;setToken(access_token);setUser(userData);localStorage.setItem('token',access_token);localStorage.setItem('loginTime',Date.now().toString());// Set default authorization header\napi.defaults.headers.common['Authorization']=`Bearer ${access_token}`;console.log('✅ AuthContext: Login successful, user set:',userData);console.log('✅ AuthContext: Login time stored:',new Date().toISOString());}catch(error){var _error$response,_error$response2,_error$response2$data;console.error('❌ AuthContext: Login failed:',error);console.error('❌ AuthContext: Error response:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.detail)||'Login failed');}};const register=async userData=>{try{const response=await api.post('/auth/register',userData);const{access_token,user:newUser}=response.data;setToken(access_token);setUser(newUser);localStorage.setItem('token',access_token);// Set default authorization header\napi.defaults.headers.common['Authorization']=`Bearer ${access_token}`;}catch(error){var _error$response3,_error$response3$data;throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.detail)||'Registration failed');}};const logout=async()=>{setUser(null);setToken(null);localStorage.removeItem('token');localStorage.clear();// Clear all localStorage\ndelete api.defaults.headers.common['Authorization'];// Force redirect to login\nwindow.location.href='/login';};const updateProfile=async userData=>{try{const response=await api.put('/users/profile',userData);setUser(response.data);}catch(error){var _error$response4,_error$response4$data;throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.detail)||'Profile update failed');}};const value={user,token,isAuthenticated:!!token&&!!user,loading,login,logout,register,updateProfile};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}