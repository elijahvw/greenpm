{"ast":null,"code":"import{api}from'./api';export const leaseService={// Get all leases for the current landlord\nasync getLeases(){const response=await api.get('/leases/');return response.data;},// Get a single lease by ID\nasync getLease(id){const response=await api.get(`/leases/${id}`);return response.data;},// Create a new lease\nasync createLease(lease){var _lease$petPolicy,_lease$landlordRespon,_lease$petPolicy2,_lease$tenantResponsi;// Transform frontend payload to match backend GCP database schema\nconst backendPayload={property_id:lease.propertyId,tenant_id:lease.tenantId,start_date:lease.startDate,end_date:lease.endDate,monthly_rent:lease.monthlyRent,security_deposit:lease.securityDeposit||0,late_fee_amount:lease.lateFeePenalty||0,late_fee_grace_period:lease.gracePeriodDays||5,lease_terms:{pet_policy:((_lease$petPolicy=lease.petPolicy)===null||_lease$petPolicy===void 0?void 0:_lease$petPolicy.restrictions)||null,smoking_allowed:false,// Default value\nsubletting_allowed:false,// Default value\nmaintenance_responsibility:((_lease$landlordRespon=lease.landlordResponsibilities)===null||_lease$landlordRespon===void 0?void 0:_lease$landlordRespon.join(', '))||null,utilities_included:lease.utilitiesIncluded||[],parking_included:false,// Default value\nadditional_terms:[lease.specialTerms,lease.notes,`Lease Type: ${lease.leaseType}`,`Renewal Option: ${lease.renewalOption?'Yes':'No'}`,(_lease$petPolicy2=lease.petPolicy)!==null&&_lease$petPolicy2!==void 0&&_lease$petPolicy2.allowed?`Pet Policy: Allowed (Deposit: $${lease.petPolicy.deposit}, Monthly: $${lease.petPolicy.monthlyFee})`:'Pet Policy: Not Allowed',`Tenant Responsibilities: ${((_lease$tenantResponsi=lease.tenantResponsibilities)===null||_lease$tenantResponsi===void 0?void 0:_lease$tenantResponsi.join(', '))||'None specified'}`].filter(Boolean).join('\\n\\n')}};console.log('🔄 Original lease data:',lease);console.log('🔄 Transformed lease payload for GCP DB:',backendPayload);// Debug API call details\nconsole.log('🔍 Making API call to /leases...');console.log('🔍 API base URL:',api.defaults.baseURL);console.log('🔍 Authorization header:',api.defaults.headers.common['Authorization']);try{const response=await api.post('/leases',backendPayload);console.log('✅ Lease creation successful:',response.data);return response.data;}catch(error){var _error$response,_error$response2,_error$response3;console.error('❌ Lease creation failed:',error);console.error('❌ Error status:',(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status);console.error('❌ Error data:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);console.error('❌ Error headers:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.headers);throw error;}},// Update an existing lease\nasync updateLease(lease){console.log('🔄 Updating lease:',lease);try{const response=await api.put(`/leases/${lease.id}`,lease);console.log('✅ Lease update successful:',response.data);return response.data;}catch(error){var _error$response4,_error$response5;console.error('❌ Lease update failed:',error);console.error('❌ Error status:',(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status);console.error('❌ Error data:',(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data);throw error;}},// Delete a lease\nasync deleteLease(id){await api.delete(`/leases/${id}`);},// Get leases by property\nasync getLeasesByProperty(propertyId){const response=await api.get(`/leases?propertyId=${propertyId}`);return response.data;},// Get leases by tenant\nasync getLeasesByTenant(tenantId){const response=await api.get(`/leases?tenantId=${tenantId}`);return response.data;},// Get active leases\nasync getActiveLeases(){const response=await api.get('/leases?status=active');return response.data;},// Get expiring leases (within specified days)\nasync getExpiringLeases(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;const response=await api.get(`/leases/expiring?days=${days}`);return response.data;},// Terminate a lease\nasync terminateLease(leaseId,termination){const response=await api.post(`/leases/${leaseId}/terminate`,termination);return response.data;},// Renew a lease\nasync renewLease(leaseId,renewal){const response=await api.post(`/leases/${leaseId}/renew`,renewal);return response.data;},// Upload lease documents\nasync uploadDocuments(leaseId,files){const formData=new FormData();files.forEach(file=>{formData.append('documents',file);});const response=await api.post(`/leases/${leaseId}/documents`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data.documentUrls;},// Delete lease document\nasync deleteDocument(leaseId,documentUrl){await api.delete(`/leases/${leaseId}/documents`,{data:{documentUrl}});},// Generate lease document\nasync generateLeaseDocument(leaseId){const response=await api.post(`/leases/${leaseId}/generate-document`);return response.data.documentUrl;},// Sign lease\nasync signLease(leaseId,signatureData){const response=await api.post(`/leases/${leaseId}/sign`,signatureData);return response.data;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}