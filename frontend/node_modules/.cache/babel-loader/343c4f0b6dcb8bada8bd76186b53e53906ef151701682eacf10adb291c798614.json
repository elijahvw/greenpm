{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'https://greenpm-dev-backend-working-yvfzslnr7a-uc.a.run.app';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('authToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});export const reportsService={// Reports\nasync getReports(){const response=await api.get('/api/v1/reports');return response.data;},async getReport(id){const response=await api.get(`/api/v1/reports/${id}`);return response.data;},async createReport(report){const response=await api.post('/api/v1/reports',report);return response.data;},async deleteReport(id){await api.delete(`/api/v1/reports/${id}`);},async downloadReport(id){const response=await api.get(`/api/v1/reports/${id}/download`,{responseType:'blob'});return response.data;},// Specific Report Types\nasync generateFinancialReport(startDate,endDate,propertyIds){const response=await api.post('/api/v1/reports/financial',{startDate,endDate,propertyIds});return response.data;},async generateOccupancyReport(startDate,endDate,propertyIds){const response=await api.post('/api/v1/reports/occupancy',{startDate,endDate,propertyIds});return response.data;},async generateMaintenanceReport(startDate,endDate,propertyIds){const response=await api.post('/api/v1/reports/maintenance',{startDate,endDate,propertyIds});return response.data;},async generateTenantReport(startDate,endDate,propertyIds){const response=await api.post('/api/v1/reports/tenant',{startDate,endDate,propertyIds});return response.data;},async generatePropertyReport(startDate,endDate,propertyIds){const response=await api.post('/api/v1/reports/property',{startDate,endDate,propertyIds});return response.data;},// Report Templates\nasync getReportTemplates(){const response=await api.get('/api/v1/report-templates');return response.data;},async getReportTemplate(id){const response=await api.get(`/api/v1/report-templates/${id}`);return response.data;},async createReportTemplate(template){const response=await api.post('/api/v1/report-templates',template);return response.data;},async updateReportTemplate(id,template){const response=await api.put(`/api/v1/report-templates/${id}`,template);return response.data;},async deleteReportTemplate(id){await api.delete(`/api/v1/report-templates/${id}`);},// Analytics Dashboard\nasync getAnalyticsDashboard(startDate,endDate){const params=new URLSearchParams();if(startDate)params.append('startDate',startDate);if(endDate)params.append('endDate',endDate);const response=await api.get(`/api/v1/analytics/dashboard?${params.toString()}`);return response.data;},// Export functions\nasync exportReportData(reportType,startDate,endDate,format,propertyIds){const response=await api.post(`/api/v1/reports/export`,{reportType,startDate,endDate,format,propertyIds},{responseType:'blob'});return response.data;},// Scheduled Reports\nasync getScheduledReports(){const response=await api.get('/api/v1/scheduled-reports');return response.data;},async createScheduledReport(schedule){const response=await api.post('/api/v1/scheduled-reports',schedule);return response.data;},async deleteScheduledReport(id){await api.delete(`/api/v1/scheduled-reports/${id}`);}};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","reportsService","getReports","response","get","data","getReport","id","createReport","report","post","deleteReport","delete","downloadReport","responseType","generateFinancialReport","startDate","endDate","propertyIds","generateOccupancyReport","generateMaintenanceReport","generateTenantReport","generatePropertyReport","getReportTemplates","getReportTemplate","createReportTemplate","template","updateReportTemplate","put","deleteReportTemplate","getAnalyticsDashboard","params","URLSearchParams","append","toString","exportReportData","reportType","format","getScheduledReports","createScheduledReport","schedule","deleteScheduledReport"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/reportsService.ts"],"sourcesContent":["import axios from 'axios';\nimport { \n  Report, \n  ReportTemplate, \n  CreateReportRequest, \n  AnalyticsDashboard,\n  FinancialReport,\n  OccupancyReport,\n  MaintenanceReport,\n  TenantReport,\n  PropertyReport\n} from '../types/reports';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://greenpm-dev-backend-working-yvfzslnr7a-uc.a.run.app';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const reportsService = {\n  // Reports\n  async getReports(): Promise<Report[]> {\n    const response = await api.get('/api/v1/reports');\n    return response.data;\n  },\n\n  async getReport(id: string): Promise<Report> {\n    const response = await api.get(`/api/v1/reports/${id}`);\n    return response.data;\n  },\n\n  async createReport(report: CreateReportRequest): Promise<Report> {\n    const response = await api.post('/api/v1/reports', report);\n    return response.data;\n  },\n\n  async deleteReport(id: string): Promise<void> {\n    await api.delete(`/api/v1/reports/${id}`);\n  },\n\n  async downloadReport(id: string): Promise<Blob> {\n    const response = await api.get(`/api/v1/reports/${id}/download`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  // Specific Report Types\n  async generateFinancialReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<FinancialReport> {\n    const response = await api.post('/api/v1/reports/financial', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generateOccupancyReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<OccupancyReport> {\n    const response = await api.post('/api/v1/reports/occupancy', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generateMaintenanceReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<MaintenanceReport> {\n    const response = await api.post('/api/v1/reports/maintenance', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generateTenantReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<TenantReport> {\n    const response = await api.post('/api/v1/reports/tenant', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  async generatePropertyReport(\n    startDate: string, \n    endDate: string, \n    propertyIds?: string[]\n  ): Promise<PropertyReport> {\n    const response = await api.post('/api/v1/reports/property', {\n      startDate,\n      endDate,\n      propertyIds,\n    });\n    return response.data;\n  },\n\n  // Report Templates\n  async getReportTemplates(): Promise<ReportTemplate[]> {\n    const response = await api.get('/api/v1/report-templates');\n    return response.data;\n  },\n\n  async getReportTemplate(id: string): Promise<ReportTemplate> {\n    const response = await api.get(`/api/v1/report-templates/${id}`);\n    return response.data;\n  },\n\n  async createReportTemplate(template: Omit<ReportTemplate, 'id' | 'createdAt' | 'createdBy'>): Promise<ReportTemplate> {\n    const response = await api.post('/api/v1/report-templates', template);\n    return response.data;\n  },\n\n  async updateReportTemplate(id: string, template: Partial<ReportTemplate>): Promise<ReportTemplate> {\n    const response = await api.put(`/api/v1/report-templates/${id}`, template);\n    return response.data;\n  },\n\n  async deleteReportTemplate(id: string): Promise<void> {\n    await api.delete(`/api/v1/report-templates/${id}`);\n  },\n\n  // Analytics Dashboard\n  async getAnalyticsDashboard(startDate?: string, endDate?: string): Promise<AnalyticsDashboard> {\n    const params = new URLSearchParams();\n    if (startDate) params.append('startDate', startDate);\n    if (endDate) params.append('endDate', endDate);\n    \n    const response = await api.get(`/api/v1/analytics/dashboard?${params.toString()}`);\n    return response.data;\n  },\n\n  // Export functions\n  async exportReportData(\n    reportType: string,\n    startDate: string,\n    endDate: string,\n    format: 'csv' | 'excel' | 'pdf',\n    propertyIds?: string[]\n  ): Promise<Blob> {\n    const response = await api.post(`/api/v1/reports/export`, {\n      reportType,\n      startDate,\n      endDate,\n      format,\n      propertyIds,\n    }, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n\n  // Scheduled Reports\n  async getScheduledReports(): Promise<any[]> {\n    const response = await api.get('/api/v1/scheduled-reports');\n    return response.data;\n  },\n\n  async createScheduledReport(schedule: {\n    reportType: string;\n    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n    recipients: string[];\n    filters?: any;\n  }): Promise<any> {\n    const response = await api.post('/api/v1/scheduled-reports', schedule);\n    return response.data;\n  },\n\n  async deleteScheduledReport(id: string): Promise<void> {\n    await api.delete(`/api/v1/scheduled-reports/${id}`);\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}