{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';export const api=axios.create({baseURL:`${API_BASE_URL}/api/v1`,timeout:30000,// Increased to 30 seconds for safety\nheaders:{'Content-Type':'application/json'}});// Add request interceptor to include token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Add response interceptor to handle errors\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Token expired or invalid\nconsole.warn('🚨 API: 401 Unauthorized - Token may be expired');localStorage.removeItem('token');// Only redirect if we're not already on login page\nif(!window.location.pathname.includes('/login')){// Give user a moment to see any error messages before redirecting\nsetTimeout(()=>{window.location.href='/login';},2000);}}return Promise.reject(error);});// API service classes\nexport class AuthService{static async login(email,password){const response=await api.post('/auth/login',{email,password});return response.data;}static async register(userData){const response=await api.post('/auth/register',userData);return response.data;}static async getCurrentUser(){const response=await api.get('/auth/me');return response.data;}static async refreshToken(){const response=await api.post('/auth/refresh');return response.data;}}export class PropertyService{static async getProperties(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};console.log('🏠 Fetching properties from:',`${API_BASE_URL}/api/v1/properties`);const response=await api.get('/properties',{params});console.log('🏠 Properties response:',response.data);return response.data;}static async getProperty(id){const response=await api.get(`/properties/${id}`);return response.data;}static async createProperty(data){const response=await api.post('/properties',data);return response.data;}static async updateProperty(id,data){const response=await api.put(`/properties/${id}`,data);return response.data;}static async deleteProperty(id){const response=await api.delete(`/properties/${id}`);return response.data;}static async uploadPropertyImages(id,files){const formData=new FormData();Array.from(files).forEach(file=>{formData.append('files',file);});const response=await api.post(`/properties/${id}/images`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}}export class ApplicationService{static async getApplications(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/applications',{params});return response.data;}static async getApplication(id){const response=await api.get(`/applications/${id}`);return response.data;}static async createApplication(data){const response=await api.post('/applications',data);return response.data;}static async updateApplication(id,data){const response=await api.put(`/applications/${id}`,data);return response.data;}static async approveApplication(id){const response=await api.post(`/applications/${id}/approve`);return response.data;}static async rejectApplication(id,reason){const response=await api.post(`/applications/${id}/reject`,{reason});return response.data;}}export class LeaseService{static async getLeases(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/leases',{params});return response.data;}static async getLease(id){const response=await api.get(`/leases/${id}`);return response.data;}static async createLease(data){const response=await api.post('/leases',data);return response.data;}static async updateLease(id,data){const response=await api.put(`/leases/${id}`,data);return response.data;}static async signLease(id,signatureData){const response=await api.post(`/leases/${id}/sign`,signatureData);return response.data;}static async terminateLease(id,terminationData){const response=await api.post(`/leases/${id}/terminate`,terminationData);return response.data;}}export class MaintenanceService{static async getMaintenanceRequests(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/maintenance/requests',{params});return response.data;}static async getMaintenanceRequest(id){const response=await api.get(`/maintenance/requests/${id}`);return response.data;}static async createMaintenanceRequest(data){const response=await api.post('/maintenance/requests',data);return response.data;}static async updateMaintenanceRequest(id,data){const response=await api.put(`/maintenance/requests/${id}`,data);return response.data;}static async uploadMaintenanceImages(id,files){const formData=new FormData();Array.from(files).forEach(file=>{formData.append('files',file);});const response=await api.post(`/maintenance/requests/${id}/images`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}static async closeMaintenanceRequest(id,resolution){const response=await api.post(`/maintenance/requests/${id}/close`,{resolution_notes:resolution});return response.data;}}export class PaymentService{static async getPayments(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/payments',{params});return response.data;}static async getPayment(id){const response=await api.get(`/payments/${id}`);return response.data;}static async createPayment(data){const response=await api.post('/payments',data);return response.data;}static async getPaymentSchedule(leaseId){const response=await api.get(`/payments/schedule/${leaseId}`);return response.data;}static async getPaymentSummary(){const response=await api.get('/payments/summary');return response.data;}}export class MessageService{static async getThreads(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/messages/threads',{params});return response.data;}static async getThread(id){const response=await api.get(`/messages/threads/${id}`);return response.data;}static async getMessages(threadId){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const response=await api.get('/messages',{params:{thread_id:threadId,...params}});return response.data;}static async sendMessage(data){const response=await api.post('/messages',data);return response.data;}static async sendQuickMessage(recipientId,subject,content){const response=await api.post('/messages/quick-message',{recipient_id:recipientId,subject,content});return response.data;}static async markThreadRead(threadId){const response=await api.post(`/messages/threads/${threadId}/mark-read`);return response.data;}static async getUnreadCount(){const response=await api.get('/messages/unread-count');return response.data;}}export class DashboardService{static async getDashboardStats(){console.log('🔍 Fetching dashboard stats from:',`${API_BASE_URL}/api/v1/dashboard/stats`);const response=await api.get('/dashboard/stats');console.log('📊 Dashboard stats response:',response.data);return response.data;}static async getRecentActivity(){console.log('🔍 Fetching recent activity from:',`${API_BASE_URL}/api/v1/dashboard/activity`);const response=await api.get('/dashboard/activity');console.log('📈 Recent activity response:',response.data);return response.data;}}export class AdminService{static async getAdminDashboard(){const response=await api.get('/admin/dashboard');return response.data;}static async getUsers(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/users',{params});return response.data;}static async updateUser(id,data){const response=await api.put(`/admin/users/${id}`,data);return response.data;}static async deleteUser(id){const response=await api.delete(`/admin/users/${id}`);return response.data;}static async getActivityLog(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get('/admin/activity-log',{params});return response.data;}static async getSystemHealth(){const response=await api.get('/admin/system-health');return response.data;}}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}