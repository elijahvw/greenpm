{"ast":null,"code":"import{propertyService}from'./propertyService';import{leaseService}from'./leaseService';class PropertyLeaseService{/**\n   * Get all properties with their current lease information\n   */async getPropertiesWithLeaseInfo(){try{// Fetch both properties and leases\nconst[properties,leases]=await Promise.all([propertyService.getProperties(),leaseService.getLeases()]);// Create a map of property ID to current lease\nconst propertyLeaseMap=new Map();leases.forEach(lease=>{const propertyId=lease.propertyId||lease.property_id;if(propertyId&&(lease.status==='active'||lease.status==='pending')){// Only keep the most recent active/pending lease per property\nconst existing=propertyLeaseMap.get(propertyId);if(!existing||new Date(lease.createdAt||lease.created_at||'')>new Date(existing.createdAt||existing.created_at||'')){propertyLeaseMap.set(propertyId,lease);}}});// Combine properties with lease information\nconst propertiesWithLeaseInfo=properties.map(property=>{const currentLease=propertyLeaseMap.get(property.id);let lease_status='vacant';let current_lease=undefined;if(currentLease){lease_status=currentLease.status==='active'?'occupied':'pending';current_lease={id:currentLease.id,status:currentLease.status||'',start_date:currentLease.startDate||currentLease.start_date,end_date:currentLease.endDate||currentLease.end_date,monthly_rent:currentLease.monthlyRent||currentLease.rent_amount||currentLease.monthly_rent,tenant_name:currentLease.tenant_name||currentLease.tenantName,tenant_email:currentLease.tenant_email||currentLease.tenantEmail};}return{...property,lease_status,current_lease};});return propertiesWithLeaseInfo;}catch(error){console.error('Error fetching properties with lease info:',error);throw error;}}/**\n   * Get lease history for a specific property\n   */async getPropertyLeaseHistory(propertyId){try{const allLeases=await leaseService.getLeases();return allLeases.filter(lease=>(lease.propertyId||lease.property_id)===propertyId).sort((a,b)=>{const dateA=new Date(a.createdAt||a.created_at||'');const dateB=new Date(b.createdAt||b.created_at||'');return dateB.getTime()-dateA.getTime();// Most recent first\n});}catch(error){console.error('Error fetching property lease history:',error);throw error;}}/**\n   * Get properties filtered by lease status\n   */async getPropertiesByLeaseStatus(status){try{const propertiesWithLeaseInfo=await this.getPropertiesWithLeaseInfo();return propertiesWithLeaseInfo.filter(property=>property.lease_status===status);}catch(error){console.error('Error fetching properties by lease status:',error);throw error;}}}export const propertyLeaseService=new PropertyLeaseService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}