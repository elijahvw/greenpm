{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const tenantService = {\n  // Get all tenants for the current landlord\n  async getTenants() {\n    const response = await api.get('/tenants');\n    return response.data;\n  },\n  // Get a single tenant by ID\n  async getTenant(id) {\n    const response = await api.get(`/tenants/${id}`);\n    return response.data;\n  },\n  // Create a new tenant\n  async createTenant(tenant) {\n    const response = await api.post('/tenants', tenant);\n    return response.data;\n  },\n  // Update an existing tenant\n  async updateTenant(tenant) {\n    const response = await api.put(`/tenants/${tenant.id}`, tenant);\n    return response.data;\n  },\n  // Delete a tenant\n  async deleteTenant(id) {\n    await api.delete(`/tenants/${id}`);\n  },\n  // Upload tenant documents\n  async uploadDocuments(tenantId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('documents', file);\n    });\n    const response = await api.post(`/tenants/${tenantId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.documentUrls;\n  },\n  // Delete tenant document\n  async deleteDocument(tenantId, documentUrl) {\n    await api.delete(`/tenants/${tenantId}/documents`, {\n      data: {\n        documentUrl\n      }\n    });\n  },\n  // Get tenants by property\n  async getTenantsByProperty(propertyId) {\n    const response = await api.get(`/properties/${propertyId}/tenants`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","tenantService","getTenants","response","get","data","getTenant","id","createTenant","tenant","post","updateTenant","put","deleteTenant","delete","uploadDocuments","tenantId","files","formData","FormData","forEach","file","append","documentUrls","deleteDocument","documentUrl","getTenantsByProperty","propertyId"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/tenantService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Tenant, CreateTenantRequest, UpdateTenantRequest } from '../types/tenant';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const tenantService = {\n  // Get all tenants for the current landlord\n  async getTenants(): Promise<Tenant[]> {\n    const response = await api.get('/tenants');\n    return response.data;\n  },\n\n  // Get a single tenant by ID\n  async getTenant(id: string): Promise<Tenant> {\n    const response = await api.get(`/tenants/${id}`);\n    return response.data;\n  },\n\n  // Create a new tenant\n  async createTenant(tenant: CreateTenantRequest): Promise<Tenant> {\n    const response = await api.post('/tenants', tenant);\n    return response.data;\n  },\n\n  // Update an existing tenant\n  async updateTenant(tenant: UpdateTenantRequest): Promise<Tenant> {\n    const response = await api.put(`/tenants/${tenant.id}`, tenant);\n    return response.data;\n  },\n\n  // Delete a tenant\n  async deleteTenant(id: string): Promise<void> {\n    await api.delete(`/tenants/${id}`);\n  },\n\n  // Upload tenant documents\n  async uploadDocuments(tenantId: string, files: File[]): Promise<string[]> {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('documents', file);\n    });\n\n    const response = await api.post(`/tenants/${tenantId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.documentUrls;\n  },\n\n  // Delete tenant document\n  async deleteDocument(tenantId: string, documentUrl: string): Promise<void> {\n    await api.delete(`/tenants/${tenantId}/documents`, {\n      data: { documentUrl },\n    });\n  },\n\n  // Get tenants by property\n  async getTenantsByProperty(propertyId: string): Promise<Tenant[]> {\n    const response = await api.get(`/properties/${propertyId}/tenants`);\n    return response.data;\n  },\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAE,GAAGN,YAAY,SAAS;EACjCO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,aAAa,GAAG;EAC3B;EACA,MAAMC,UAAUA,CAAA,EAAsB;IACpC,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,SAASA,CAACC,EAAU,EAAmB;IAC3C,MAAMJ,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,YAAYG,EAAE,EAAE,CAAC;IAChD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMG,YAAYA,CAACC,MAA2B,EAAmB;IAC/D,MAAMN,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,UAAU,EAAED,MAAM,CAAC;IACnD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMM,YAAYA,CAACF,MAA2B,EAAmB;IAC/D,MAAMN,QAAQ,GAAG,MAAMd,GAAG,CAACuB,GAAG,CAAC,YAAYH,MAAM,CAACF,EAAE,EAAE,EAAEE,MAAM,CAAC;IAC/D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMQ,YAAYA,CAACN,EAAU,EAAiB;IAC5C,MAAMlB,GAAG,CAACyB,MAAM,CAAC,YAAYP,EAAE,EAAE,CAAC;EACpC,CAAC;EAED;EACA,MAAMQ,eAAeA,CAACC,QAAgB,EAAEC,KAAa,EAAqB;IACxE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BF,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;MACtBH,QAAQ,CAACI,MAAM,CAAC,WAAW,EAAED,IAAI,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMlB,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,YAAYM,QAAQ,YAAY,EAAEE,QAAQ,EAAE;MAC1E1B,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACE,IAAI,CAACkB,YAAY;EACnC,CAAC;EAED;EACA,MAAMC,cAAcA,CAACR,QAAgB,EAAES,WAAmB,EAAiB;IACzE,MAAMpC,GAAG,CAACyB,MAAM,CAAC,YAAYE,QAAQ,YAAY,EAAE;MACjDX,IAAI,EAAE;QAAEoB;MAAY;IACtB,CAAC,CAAC;EACJ,CAAC;EAED;EACA,MAAMC,oBAAoBA,CAACC,UAAkB,EAAqB;IAChE,MAAMxB,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,eAAeuB,UAAU,UAAU,CAAC;IACnE,OAAOxB,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}