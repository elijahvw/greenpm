{"ast":null,"code":"// Utility functions for JWT token handling\nexport const isTokenExpired=token=>{try{// Decode JWT token (without verification)\nconst base64Url=token.split('.')[1];const base64=base64Url.replace(/-/g,'+').replace(/_/g,'/');const jsonPayload=decodeURIComponent(atob(base64).split('').map(c=>'%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join(''));const payload=JSON.parse(jsonPayload);const currentTime=Math.floor(Date.now()/1000);console.log('🔍 Token payload:',payload);console.log('🔍 Current time:',currentTime);console.log('🔍 Token expires at:',payload.exp);console.log('🔍 Time until expiration:',payload.exp-currentTime,'seconds');return payload.exp<currentTime;}catch(error){console.error('❌ Error parsing token:',error);return true;// Assume expired if we can't parse it\n}};export const getTokenTimeUntilExpiration=token=>{try{const base64Url=token.split('.')[1];const base64=base64Url.replace(/-/g,'+').replace(/_/g,'/');const jsonPayload=decodeURIComponent(atob(base64).split('').map(c=>'%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join(''));const payload=JSON.parse(jsonPayload);const currentTime=Math.floor(Date.now()/1000);return payload.exp-currentTime;// seconds until expiration\n}catch(error){return 0;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}