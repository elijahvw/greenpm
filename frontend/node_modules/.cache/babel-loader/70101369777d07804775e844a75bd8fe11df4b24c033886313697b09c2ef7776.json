{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const tenantService = {\n  // Get all tenants for the current landlord\n  async getTenants() {\n    try {\n      // Use the dedicated tenants endpoint\n      const response = await api.get('/users/tenants');\n      const tenants = response.data;\n\n      // Extract unique tenants from lease data\n      const tenantMap = new Map();\n      leases.forEach(lease => {\n        if (lease.tenant_id && lease.tenant_name) {\n          tenantMap.set(lease.tenant_id, {\n            id: lease.tenant_id,\n            firstName: lease.tenant_name.split(' ')[0] || '',\n            lastName: lease.tenant_name.split(' ').slice(1).join(' ') || '',\n            email: lease.tenant_email || '',\n            phone: lease.tenant_phone || '',\n            // Additional fields with defaults\n            dateOfBirth: '',\n            emergencyContact: {\n              name: '',\n              phone: '',\n              relationship: ''\n            },\n            employment: {\n              employer: '',\n              position: '',\n              monthlyIncome: 0,\n              employmentStartDate: ''\n            },\n            documents: [],\n            leaseHistory: [],\n            paymentHistory: [],\n            createdAt: lease.created_at || '',\n            updatedAt: lease.updated_at || '',\n            isActive: lease.status === 'active',\n            // Current lease info\n            currentProperty: lease.property_name || '',\n            currentRent: lease.rent_amount || 0,\n            leaseStartDate: lease.start_date || '',\n            leaseEndDate: lease.end_date || ''\n          });\n        }\n      });\n      return Array.from(tenantMap.values());\n    } catch (error) {\n      console.error('Error fetching tenants from leases:', error);\n      return [];\n    }\n  },\n  // Get a single tenant by ID\n  async getTenant(id) {\n    const response = await api.get(`/tenants/${id}`);\n    return response.data;\n  },\n  // Create a new tenant\n  async createTenant(tenant) {\n    const response = await api.post('/tenants', tenant);\n    return response.data;\n  },\n  // Update an existing tenant\n  async updateTenant(tenant) {\n    const response = await api.put(`/tenants/${tenant.id}`, tenant);\n    return response.data;\n  },\n  // Delete a tenant\n  async deleteTenant(id) {\n    await api.delete(`/tenants/${id}`);\n  },\n  // Upload tenant documents\n  async uploadDocuments(tenantId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('documents', file);\n    });\n    const response = await api.post(`/tenants/${tenantId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.documentUrls;\n  },\n  // Delete tenant document\n  async deleteDocument(tenantId, documentUrl) {\n    await api.delete(`/tenants/${tenantId}/documents`, {\n      data: {\n        documentUrl\n      }\n    });\n  },\n  // Get tenants by property\n  async getTenantsByProperty(propertyId) {\n    const response = await api.get(`/properties/${propertyId}/tenants`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","tenantService","getTenants","response","get","tenants","data","tenantMap","Map","leases","forEach","lease","tenant_id","tenant_name","set","id","firstName","split","lastName","slice","join","email","tenant_email","phone","tenant_phone","dateOfBirth","emergencyContact","name","relationship","employment","employer","position","monthlyIncome","employmentStartDate","documents","leaseHistory","paymentHistory","createdAt","created_at","updatedAt","updated_at","isActive","status","currentProperty","property_name","currentRent","rent_amount","leaseStartDate","start_date","leaseEndDate","end_date","Array","from","values","error","console","getTenant","createTenant","tenant","post","updateTenant","put","deleteTenant","delete","uploadDocuments","tenantId","files","formData","FormData","file","append","documentUrls","deleteDocument","documentUrl","getTenantsByProperty","propertyId"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/tenantService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Tenant, CreateTenantRequest, UpdateTenantRequest } from '../types/tenant';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const tenantService = {\n  // Get all tenants for the current landlord\n  async getTenants(): Promise<Tenant[]> {\n    try {\n      // Use the dedicated tenants endpoint\n      const response = await api.get('/users/tenants');\n      const tenants = response.data;\n      \n      // Extract unique tenants from lease data\n      const tenantMap = new Map();\n      \n      leases.forEach((lease: any) => {\n        if (lease.tenant_id && lease.tenant_name) {\n          tenantMap.set(lease.tenant_id, {\n            id: lease.tenant_id,\n            firstName: lease.tenant_name.split(' ')[0] || '',\n            lastName: lease.tenant_name.split(' ').slice(1).join(' ') || '',\n            email: lease.tenant_email || '',\n            phone: lease.tenant_phone || '',\n            // Additional fields with defaults\n            dateOfBirth: '',\n            emergencyContact: {\n              name: '',\n              phone: '',\n              relationship: ''\n            },\n            employment: {\n              employer: '',\n              position: '',\n              monthlyIncome: 0,\n              employmentStartDate: ''\n            },\n            documents: [],\n            leaseHistory: [],\n            paymentHistory: [],\n            createdAt: lease.created_at || '',\n            updatedAt: lease.updated_at || '',\n            isActive: lease.status === 'active',\n            // Current lease info\n            currentProperty: lease.property_name || '',\n            currentRent: lease.rent_amount || 0,\n            leaseStartDate: lease.start_date || '',\n            leaseEndDate: lease.end_date || ''\n          });\n        }\n      });\n      \n      return Array.from(tenantMap.values());\n    } catch (error) {\n      console.error('Error fetching tenants from leases:', error);\n      return [];\n    }\n  },\n\n  // Get a single tenant by ID\n  async getTenant(id: string): Promise<Tenant> {\n    const response = await api.get(`/tenants/${id}`);\n    return response.data;\n  },\n\n  // Create a new tenant\n  async createTenant(tenant: CreateTenantRequest): Promise<Tenant> {\n    const response = await api.post('/tenants', tenant);\n    return response.data;\n  },\n\n  // Update an existing tenant\n  async updateTenant(tenant: UpdateTenantRequest): Promise<Tenant> {\n    const response = await api.put(`/tenants/${tenant.id}`, tenant);\n    return response.data;\n  },\n\n  // Delete a tenant\n  async deleteTenant(id: string): Promise<void> {\n    await api.delete(`/tenants/${id}`);\n  },\n\n  // Upload tenant documents\n  async uploadDocuments(tenantId: string, files: File[]): Promise<string[]> {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('documents', file);\n    });\n\n    const response = await api.post(`/tenants/${tenantId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.documentUrls;\n  },\n\n  // Delete tenant document\n  async deleteDocument(tenantId: string, documentUrl: string): Promise<void> {\n    await api.delete(`/tenants/${tenantId}/documents`, {\n      data: { documentUrl },\n    });\n  },\n\n  // Get tenants by property\n  async getTenantsByProperty(propertyId: string): Promise<Tenant[]> {\n    const response = await api.get(`/properties/${propertyId}/tenants`);\n    return response.data;\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}