{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://greenpm-dev-backend-working-yvfzslnr7a-uc.a.run.app';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const leaseService = {\n  // Get all leases for the current landlord\n  async getLeases() {\n    const response = await api.get('/api/v1/leases');\n    return response.data;\n  },\n  // Get a single lease by ID\n  async getLease(id) {\n    const response = await api.get(`/api/v1/leases/${id}`);\n    return response.data;\n  },\n  // Create a new lease\n  async createLease(lease) {\n    const response = await api.post('/api/v1/leases', lease);\n    return response.data;\n  },\n  // Update an existing lease\n  async updateLease(lease) {\n    const response = await api.put(`/api/v1/leases/${lease.id}`, lease);\n    return response.data;\n  },\n  // Delete a lease\n  async deleteLease(id) {\n    await api.delete(`/api/v1/leases/${id}`);\n  },\n  // Get leases by property\n  async getLeasesByProperty(propertyId) {\n    const response = await api.get(`/api/v1/leases?propertyId=${propertyId}`);\n    return response.data;\n  },\n  // Get leases by tenant\n  async getLeasesByTenant(tenantId) {\n    const response = await api.get(`/api/v1/leases?tenantId=${tenantId}`);\n    return response.data;\n  },\n  // Get active leases\n  async getActiveLeases() {\n    const response = await api.get('/api/v1/leases?status=active');\n    return response.data;\n  },\n  // Get expiring leases (within specified days)\n  async getExpiringLeases(days = 30) {\n    const response = await api.get(`/api/v1/leases/expiring?days=${days}`);\n    return response.data;\n  },\n  // Terminate a lease\n  async terminateLease(leaseId, termination) {\n    const response = await api.post(`/api/v1/leases/${leaseId}/terminate`, termination);\n    return response.data;\n  },\n  // Renew a lease\n  async renewLease(leaseId, renewal) {\n    const response = await api.post(`/api/v1/leases/${leaseId}/renew`, renewal);\n    return response.data;\n  },\n  // Upload lease documents\n  async uploadDocuments(leaseId, files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('documents', file);\n    });\n    const response = await api.post(`/api/v1/leases/${leaseId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.documentUrls;\n  },\n  // Delete lease document\n  async deleteDocument(leaseId, documentUrl) {\n    await api.delete(`/api/v1/leases/${leaseId}/documents`, {\n      data: {\n        documentUrl\n      }\n    });\n  },\n  // Generate lease document\n  async generateLeaseDocument(leaseId) {\n    const response = await api.post(`/api/v1/leases/${leaseId}/generate-document`);\n    return response.data.documentUrl;\n  },\n  // Sign lease\n  async signLease(leaseId, signatureData) {\n    const response = await api.post(`/api/v1/leases/${leaseId}/sign`, signatureData);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","leaseService","getLeases","response","get","data","getLease","id","createLease","lease","post","updateLease","put","deleteLease","delete","getLeasesByProperty","propertyId","getLeasesByTenant","tenantId","getActiveLeases","getExpiringLeases","days","terminateLease","leaseId","termination","renewLease","renewal","uploadDocuments","files","formData","FormData","forEach","file","append","documentUrls","deleteDocument","documentUrl","generateLeaseDocument","signLease","signatureData"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/leaseService.ts"],"sourcesContent":["import axios from 'axios';\nimport { Lease, CreateLeaseRequest, UpdateLeaseRequest, LeaseRenewal, LeaseTermination } from '../types/lease';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://greenpm-dev-backend-working-yvfzslnr7a-uc.a.run.app';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const leaseService = {\n  // Get all leases for the current landlord\n  async getLeases(): Promise<Lease[]> {\n    const response = await api.get('/api/v1/leases');\n    return response.data;\n  },\n\n  // Get a single lease by ID\n  async getLease(id: string): Promise<Lease> {\n    const response = await api.get(`/api/v1/leases/${id}`);\n    return response.data;\n  },\n\n  // Create a new lease\n  async createLease(lease: CreateLeaseRequest): Promise<Lease> {\n    const response = await api.post('/api/v1/leases', lease);\n    return response.data;\n  },\n\n  // Update an existing lease\n  async updateLease(lease: UpdateLeaseRequest): Promise<Lease> {\n    const response = await api.put(`/api/v1/leases/${lease.id}`, lease);\n    return response.data;\n  },\n\n  // Delete a lease\n  async deleteLease(id: string): Promise<void> {\n    await api.delete(`/api/v1/leases/${id}`);\n  },\n\n  // Get leases by property\n  async getLeasesByProperty(propertyId: string): Promise<Lease[]> {\n    const response = await api.get(`/api/v1/leases?propertyId=${propertyId}`);\n    return response.data;\n  },\n\n  // Get leases by tenant\n  async getLeasesByTenant(tenantId: string): Promise<Lease[]> {\n    const response = await api.get(`/api/v1/leases?tenantId=${tenantId}`);\n    return response.data;\n  },\n\n  // Get active leases\n  async getActiveLeases(): Promise<Lease[]> {\n    const response = await api.get('/api/v1/leases?status=active');\n    return response.data;\n  },\n\n  // Get expiring leases (within specified days)\n  async getExpiringLeases(days: number = 30): Promise<Lease[]> {\n    const response = await api.get(`/api/v1/leases/expiring?days=${days}`);\n    return response.data;\n  },\n\n  // Terminate a lease\n  async terminateLease(leaseId: string, termination: Omit<LeaseTermination, 'id' | 'leaseId' | 'createdAt'>): Promise<LeaseTermination> {\n    const response = await api.post(`/api/v1/leases/${leaseId}/terminate`, termination);\n    return response.data;\n  },\n\n  // Renew a lease\n  async renewLease(leaseId: string, renewal: Omit<LeaseRenewal, 'id' | 'originalLeaseId' | 'createdAt'>): Promise<LeaseRenewal> {\n    const response = await api.post(`/api/v1/leases/${leaseId}/renew`, renewal);\n    return response.data;\n  },\n\n  // Upload lease documents\n  async uploadDocuments(leaseId: string, files: File[]): Promise<string[]> {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('documents', file);\n    });\n\n    const response = await api.post(`/api/v1/leases/${leaseId}/documents`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data.documentUrls;\n  },\n\n  // Delete lease document\n  async deleteDocument(leaseId: string, documentUrl: string): Promise<void> {\n    await api.delete(`/api/v1/leases/${leaseId}/documents`, {\n      data: { documentUrl },\n    });\n  },\n\n  // Generate lease document\n  async generateLeaseDocument(leaseId: string): Promise<string> {\n    const response = await api.post(`/api/v1/leases/${leaseId}/generate-document`);\n    return response.data.documentUrl;\n  },\n\n  // Sign lease\n  async signLease(leaseId: string, signatureData: { signature: string; signedBy: string }): Promise<Lease> {\n    const response = await api.post(`/api/v1/leases/${leaseId}/sign`, signatureData);\n    return response.data;\n  },\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,6DAA6D;AAEnH,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,YAAY,GAAG;EAC1B;EACA,MAAMC,SAASA,CAAA,EAAqB;IAClC,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,gBAAgB,CAAC;IAChD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMC,QAAQA,CAACC,EAAU,EAAkB;IACzC,MAAMJ,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,kBAAkBG,EAAE,EAAE,CAAC;IACtD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMG,WAAWA,CAACC,KAAyB,EAAkB;IAC3D,MAAMN,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,gBAAgB,EAAED,KAAK,CAAC;IACxD,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMM,WAAWA,CAACF,KAAyB,EAAkB;IAC3D,MAAMN,QAAQ,GAAG,MAAMd,GAAG,CAACuB,GAAG,CAAC,kBAAkBH,KAAK,CAACF,EAAE,EAAE,EAAEE,KAAK,CAAC;IACnE,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMQ,WAAWA,CAACN,EAAU,EAAiB;IAC3C,MAAMlB,GAAG,CAACyB,MAAM,CAAC,kBAAkBP,EAAE,EAAE,CAAC;EAC1C,CAAC;EAED;EACA,MAAMQ,mBAAmBA,CAACC,UAAkB,EAAoB;IAC9D,MAAMb,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,6BAA6BY,UAAU,EAAE,CAAC;IACzE,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMY,iBAAiBA,CAACC,QAAgB,EAAoB;IAC1D,MAAMf,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,2BAA2Bc,QAAQ,EAAE,CAAC;IACrE,OAAOf,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMc,eAAeA,CAAA,EAAqB;IACxC,MAAMhB,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,8BAA8B,CAAC;IAC9D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMe,iBAAiBA,CAACC,IAAY,GAAG,EAAE,EAAoB;IAC3D,MAAMlB,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,gCAAgCiB,IAAI,EAAE,CAAC;IACtE,OAAOlB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMiB,cAAcA,CAACC,OAAe,EAAEC,WAAmE,EAA6B;IACpI,MAAMrB,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,kBAAkBa,OAAO,YAAY,EAAEC,WAAW,CAAC;IACnF,OAAOrB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMoB,UAAUA,CAACF,OAAe,EAAEG,OAAmE,EAAyB;IAC5H,MAAMvB,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,kBAAkBa,OAAO,QAAQ,EAAEG,OAAO,CAAC;IAC3E,OAAOvB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMsB,eAAeA,CAACJ,OAAe,EAAEK,KAAa,EAAqB;IACvE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BF,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;MACtBH,QAAQ,CAACI,MAAM,CAAC,WAAW,EAAED,IAAI,CAAC;IACpC,CAAC,CAAC;IAEF,MAAM7B,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,kBAAkBa,OAAO,YAAY,EAAEM,QAAQ,EAAE;MAC/ErC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOW,QAAQ,CAACE,IAAI,CAAC6B,YAAY;EACnC,CAAC;EAED;EACA,MAAMC,cAAcA,CAACZ,OAAe,EAAEa,WAAmB,EAAiB;IACxE,MAAM/C,GAAG,CAACyB,MAAM,CAAC,kBAAkBS,OAAO,YAAY,EAAE;MACtDlB,IAAI,EAAE;QAAE+B;MAAY;IACtB,CAAC,CAAC;EACJ,CAAC;EAED;EACA,MAAMC,qBAAqBA,CAACd,OAAe,EAAmB;IAC5D,MAAMpB,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,kBAAkBa,OAAO,oBAAoB,CAAC;IAC9E,OAAOpB,QAAQ,CAACE,IAAI,CAAC+B,WAAW;EAClC,CAAC;EAED;EACA,MAAME,SAASA,CAACf,OAAe,EAAEgB,aAAsD,EAAkB;IACvG,MAAMpC,QAAQ,GAAG,MAAMd,GAAG,CAACqB,IAAI,CAAC,kBAAkBa,OAAO,OAAO,EAAEgB,aAAa,CAAC;IAChF,OAAOpC,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}