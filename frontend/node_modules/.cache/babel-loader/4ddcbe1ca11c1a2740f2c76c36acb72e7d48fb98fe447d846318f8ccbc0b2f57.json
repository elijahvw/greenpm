{"ast":null,"code":"/**\n * Currency formatting utilities\n */\n\nexport const formatCurrency = amount => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount || 0;\n\n  // Ensure we preserve cents by using toFixed first, then formatting\n  return numAmount.toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n};\nexport const formatCurrencyWithoutSymbol = amount => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount || 0;\n  return numAmount.toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n};\nexport const parseCurrency = value => {\n  // Remove currency symbols and parse\n  const cleaned = value.replace(/[$,]/g, '');\n  return parseFloat(cleaned) || 0;\n};\nexport const roundToCents = amount => {\n  return Math.round(amount * 100) / 100;\n};","map":{"version":3,"names":["formatCurrency","amount","numAmount","parseFloat","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","formatCurrencyWithoutSymbol","parseCurrency","value","cleaned","replace","roundToCents","Math","round"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/utils/currency.ts"],"sourcesContent":["/**\n * Currency formatting utilities\n */\n\nexport const formatCurrency = (amount: number | string | undefined | null): string => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : (amount || 0);\n  \n  // Ensure we preserve cents by using toFixed first, then formatting\n  return numAmount.toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n};\n\nexport const formatCurrencyWithoutSymbol = (amount: number | string | undefined | null): string => {\n  const numAmount = typeof amount === 'string' ? parseFloat(amount) : (amount || 0);\n  \n  return numAmount.toLocaleString('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  });\n};\n\nexport const parseCurrency = (value: string): number => {\n  // Remove currency symbols and parse\n  const cleaned = value.replace(/[$,]/g, '');\n  return parseFloat(cleaned) || 0;\n};\n\nexport const roundToCents = (amount: number): number => {\n  return Math.round(amount * 100) / 100;\n};"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,cAAc,GAAIC,MAA0C,IAAa;EACpF,MAAMC,SAAS,GAAG,OAAOD,MAAM,KAAK,QAAQ,GAAGE,UAAU,CAACF,MAAM,CAAC,GAAIA,MAAM,IAAI,CAAE;;EAEjF;EACA,OAAOC,SAAS,CAACE,cAAc,CAAC,OAAO,EAAE;IACvCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,2BAA2B,GAAIR,MAA0C,IAAa;EACjG,MAAMC,SAAS,GAAG,OAAOD,MAAM,KAAK,QAAQ,GAAGE,UAAU,CAACF,MAAM,CAAC,GAAIA,MAAM,IAAI,CAAE;EAEjF,OAAOC,SAAS,CAACE,cAAc,CAAC,OAAO,EAAE;IACvCG,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,aAAa,GAAIC,KAAa,IAAa;EACtD;EACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EAC1C,OAAOV,UAAU,CAACS,OAAO,CAAC,IAAI,CAAC;AACjC,CAAC;AAED,OAAO,MAAME,YAAY,GAAIb,MAAc,IAAa;EACtD,OAAOc,IAAI,CAACC,KAAK,CAACf,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}