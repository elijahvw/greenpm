{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const securityDepositService = {\n  // Get all security deposits\n  async getSecurityDeposits() {\n    const response = await api.get('/security-deposits');\n    return response.data;\n  },\n  // Get a single security deposit by ID\n  async getSecurityDeposit(id) {\n    const response = await api.get(`/security-deposits/${id}`);\n    return response.data;\n  },\n  // Get security deposit for a specific lease\n  async getLeaseSecurityDeposit(leaseId) {\n    const response = await api.get(`/leases/${leaseId}/security-deposit`);\n    return response.data;\n  },\n  // Create a new security deposit\n  async createSecurityDeposit(deposit) {\n    const response = await api.post('/security-deposits', deposit);\n    return response.data;\n  },\n  // Update an existing security deposit\n  async updateSecurityDeposit(deposit) {\n    const response = await api.put(`/security-deposits/${deposit.id}`, deposit);\n    return response.data;\n  },\n  // Add a deduction to a security deposit\n  async addDeduction(depositId, deduction) {\n    const response = await api.post(`/security-deposits/${depositId}/deductions`, deduction);\n    return response.data;\n  },\n  // Process a refund\n  async processRefund(depositId, refund) {\n    const response = await api.post(`/security-deposits/${depositId}/refund`, refund);\n    return response.data;\n  },\n  // Get security deposits by status\n  async getSecurityDepositsByStatus(status) {\n    const response = await api.get(`/security-deposits?status=${status}`);\n    return response.data;\n  },\n  // Get security deposits for a specific tenant\n  async getTenantSecurityDeposits(tenantId) {\n    const response = await api.get(`/security-deposits?tenantId=${tenantId}`);\n    return response.data;\n  },\n  // Get security deposits for a specific property\n  async getPropertySecurityDeposits(propertyId) {\n    const response = await api.get(`/security-deposits?propertyId=${propertyId}`);\n    return response.data;\n  },\n  // Calculate interest for a security deposit\n  async calculateInterest(depositId) {\n    const response = await api.post(`/security-deposits/${depositId}/calculate-interest`);\n    return response.data;\n  },\n  // Generate security deposit summary/report\n  async getSecurityDepositSummary() {\n    const response = await api.get('/security-deposits/summary');\n    return response.data;\n  },\n  // Delete a security deposit (admin only)\n  async deleteSecurityDeposit(id) {\n    await api.delete(`/security-deposits/${id}`);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","securityDepositService","getSecurityDeposits","response","get","data","getSecurityDeposit","id","getLeaseSecurityDeposit","leaseId","createSecurityDeposit","deposit","post","updateSecurityDeposit","put","addDeduction","depositId","deduction","processRefund","refund","getSecurityDepositsByStatus","status","getTenantSecurityDeposits","tenantId","getPropertySecurityDeposits","propertyId","calculateInterest","getSecurityDepositSummary","deleteSecurityDeposit","delete"],"sources":["/Users/elijahward/Documents/greenpm/frontend/src/services/securityDepositService.ts"],"sourcesContent":["import axios from 'axios';\nimport { \n  SecurityDeposit, \n  CreateSecurityDepositRequest, \n  UpdateSecurityDepositRequest,\n  AddDeductionRequest,\n  ProcessRefundRequest,\n  SecurityDepositSummary\n} from '../types/securityDeposit';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: `${API_BASE_URL}/api/v1`,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport const securityDepositService = {\n  // Get all security deposits\n  async getSecurityDeposits(): Promise<SecurityDeposit[]> {\n    const response = await api.get('/security-deposits');\n    return response.data;\n  },\n\n  // Get a single security deposit by ID\n  async getSecurityDeposit(id: string): Promise<SecurityDeposit> {\n    const response = await api.get(`/security-deposits/${id}`);\n    return response.data;\n  },\n\n  // Get security deposit for a specific lease\n  async getLeaseSecurityDeposit(leaseId: string): Promise<SecurityDeposit> {\n    const response = await api.get(`/leases/${leaseId}/security-deposit`);\n    return response.data;\n  },\n\n  // Create a new security deposit\n  async createSecurityDeposit(deposit: CreateSecurityDepositRequest): Promise<SecurityDeposit> {\n    const response = await api.post('/security-deposits', deposit);\n    return response.data;\n  },\n\n  // Update an existing security deposit\n  async updateSecurityDeposit(deposit: UpdateSecurityDepositRequest): Promise<SecurityDeposit> {\n    const response = await api.put(`/security-deposits/${deposit.id}`, deposit);\n    return response.data;\n  },\n\n  // Add a deduction to a security deposit\n  async addDeduction(depositId: string, deduction: AddDeductionRequest): Promise<SecurityDeposit> {\n    const response = await api.post(`/security-deposits/${depositId}/deductions`, deduction);\n    return response.data;\n  },\n\n  // Process a refund\n  async processRefund(depositId: string, refund: ProcessRefundRequest): Promise<SecurityDeposit> {\n    const response = await api.post(`/security-deposits/${depositId}/refund`, refund);\n    return response.data;\n  },\n\n  // Get security deposits by status\n  async getSecurityDepositsByStatus(status: 'unpaid' | 'held' | 'partial_refunded' | 'refunded'): Promise<SecurityDeposit[]> {\n    const response = await api.get(`/security-deposits?status=${status}`);\n    return response.data;\n  },\n\n  // Get security deposits for a specific tenant\n  async getTenantSecurityDeposits(tenantId: string): Promise<SecurityDeposit[]> {\n    const response = await api.get(`/security-deposits?tenantId=${tenantId}`);\n    return response.data;\n  },\n\n  // Get security deposits for a specific property\n  async getPropertySecurityDeposits(propertyId: string): Promise<SecurityDeposit[]> {\n    const response = await api.get(`/security-deposits?propertyId=${propertyId}`);\n    return response.data;\n  },\n\n  // Calculate interest for a security deposit\n  async calculateInterest(depositId: string): Promise<{ interestAccrued: number; calculatedDate: string }> {\n    const response = await api.post(`/security-deposits/${depositId}/calculate-interest`);\n    return response.data;\n  },\n\n  // Generate security deposit summary/report\n  async getSecurityDepositSummary(): Promise<SecurityDepositSummary> {\n    const response = await api.get('/security-deposits/summary');\n    return response.data;\n  },\n\n  // Delete a security deposit (admin only)\n  async deleteSecurityDeposit(id: string): Promise<void> {\n    await api.delete(`/security-deposits/${id}`);\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}