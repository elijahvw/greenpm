{"ast":null,"code":"import{api}from'./api';export const leaseService={// Get all leases for the current landlord\nasync getLeases(){const response=await api.get('/leases/');return response.data;},// Get a single lease by ID\nasync getLease(id){const response=await api.get(`/leases/${id}`);return response.data;},// Create a new lease\nasync createLease(lease){// Transform frontend camelCase to backend snake_case\n// Note: Backend currently only supports basic fields\nconst backendPayload={property_id:lease.propertyId,tenant_id:lease.tenantId,start_date:lease.startDate,end_date:lease.endDate,rent_amount:lease.monthlyRent,security_deposit:lease.securityDeposit||0};console.log('ðŸ”„ Original lease data:',lease);console.log('ðŸ”„ Transformed lease payload:',backendPayload);const response=await api.post('/leases',backendPayload);return response.data;},// Update an existing lease\nasync updateLease(lease){const response=await api.put(`/leases/${lease.id}`,lease);return response.data;},// Delete a lease\nasync deleteLease(id){await api.delete(`/leases/${id}`);},// Get leases by property\nasync getLeasesByProperty(propertyId){const response=await api.get(`/leases?propertyId=${propertyId}`);return response.data;},// Get leases by tenant\nasync getLeasesByTenant(tenantId){const response=await api.get(`/leases?tenantId=${tenantId}`);return response.data;},// Get active leases\nasync getActiveLeases(){const response=await api.get('/leases?status=active');return response.data;},// Get expiring leases (within specified days)\nasync getExpiringLeases(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;const response=await api.get(`/leases/expiring?days=${days}`);return response.data;},// Terminate a lease\nasync terminateLease(leaseId,termination){const response=await api.post(`/leases/${leaseId}/terminate`,termination);return response.data;},// Renew a lease\nasync renewLease(leaseId,renewal){const response=await api.post(`/leases/${leaseId}/renew`,renewal);return response.data;},// Upload lease documents\nasync uploadDocuments(leaseId,files){const formData=new FormData();files.forEach(file=>{formData.append('documents',file);});const response=await api.post(`/leases/${leaseId}/documents`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data.documentUrls;},// Delete lease document\nasync deleteDocument(leaseId,documentUrl){await api.delete(`/leases/${leaseId}/documents`,{data:{documentUrl}});},// Generate lease document\nasync generateLeaseDocument(leaseId){const response=await api.post(`/leases/${leaseId}/generate-document`);return response.data.documentUrl;},// Sign lease\nasync signLease(leaseId,signatureData){const response=await api.post(`/leases/${leaseId}/sign`,signatureData);return response.data;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}