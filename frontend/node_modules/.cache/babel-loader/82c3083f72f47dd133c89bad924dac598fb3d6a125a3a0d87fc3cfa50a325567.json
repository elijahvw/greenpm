{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';const api=axios.create({baseURL:`${API_BASE_URL}/api/v1`,headers:{'Content-Type':'application/json'}});// Add auth token to requests\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;});export const tenantService={// Get all tenants for the current landlord (extracted from leases)\nasync getTenants(){try{// Since there's no dedicated tenants endpoint, we'll extract tenant data from leases\nconst response=await api.get('/leases');const leases=response.data;// Extract unique tenants from lease data\nconst tenantMap=new Map();leases.forEach(lease=>{if(lease.tenant_id&&lease.tenant_name){tenantMap.set(lease.tenant_id,{id:lease.tenant_id,firstName:lease.tenant_name.split(' ')[0]||'',lastName:lease.tenant_name.split(' ').slice(1).join(' ')||'',email:lease.tenant_email||'',phone:lease.tenant_phone||'',// Additional fields with defaults\ndateOfBirth:'',emergencyContact:{name:'',phone:'',relationship:''},employment:{employer:'',position:'',monthlyIncome:0,employmentStartDate:''},documents:[],leaseHistory:[],paymentHistory:[],createdAt:lease.created_at||'',updatedAt:lease.updated_at||'',isActive:lease.status==='active',// Current lease info\ncurrentProperty:lease.property_name||'',currentRent:lease.rent_amount||0,leaseStartDate:lease.start_date||'',leaseEndDate:lease.end_date||''});}});return Array.from(tenantMap.values());}catch(error){console.error('Error fetching tenants from leases:',error);return[];}},// Get a single tenant by ID\nasync getTenant(id){const response=await api.get(`/tenants/${id}`);return response.data;},// Create a new tenant\nasync createTenant(tenant){const response=await api.post('/tenants',tenant);return response.data;},// Update an existing tenant\nasync updateTenant(tenant){const response=await api.put(`/tenants/${tenant.id}`,tenant);return response.data;},// Delete a tenant\nasync deleteTenant(id){await api.delete(`/tenants/${id}`);},// Upload tenant documents\nasync uploadDocuments(tenantId,files){const formData=new FormData();files.forEach(file=>{formData.append('documents',file);});const response=await api.post(`/tenants/${tenantId}/documents`,formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data.documentUrls;},// Delete tenant document\nasync deleteDocument(tenantId,documentUrl){await api.delete(`/tenants/${tenantId}/documents`,{data:{documentUrl}});},// Get tenants by property\nasync getTenantsByProperty(propertyId){const response=await api.get(`/properties/${propertyId}/tenants`);return response.data;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}